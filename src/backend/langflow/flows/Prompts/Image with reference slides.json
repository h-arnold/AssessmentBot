{"name": "Image with reference slides", "description": "Get chat inputs from the Playground.", "icon": null, "icon_bg_color": null, "gradient": null, "data": {"edges": [], "nodes": [{"data": {"type": "ChatInput", "node": {"template": {"_type": "Component", "emptyTask": {"trace_as_metadata": true, "file_path": "3fa71f8c-d346-4eec-8094-d7349086bda4/2024-11-19_12-12-56_Lesson 4  - Addressing Task - Reference Slides.png", "fileTypes": ["txt", "md", "mdx", "csv", "json", "yaml", "yml", "xml", "html", "htm", "pdf", "docx", "py", "sh", "sql", "js", "ts", "tsx", "jpg", "jpeg", "png", "bmp", "image"], "list": false, "required": false, "placeholder": "", "show": true, "name": "emptyTask", "value": "Lesson 4  - Addressing Task - Reference Slides.png", "display_name": "Empty Task", "advanced": true, "dynamic": false, "info": "Empty task file to be sent with the message.", "title_case": false, "type": "file", "_input_type": "FileInput"}, "referenceTask": {"trace_as_metadata": true, "file_path": "3fa71f8c-d346-4eec-8094-d7349086bda4/2024-11-19_12-13-02_DALL\u00b7E 2024-10-24 09.09.20 - A colourful cartoon of a unicorn wearing a traditional black graduation trencher cap, with only the head and shoulders visible to give it a profile pi.png", "fileTypes": ["txt", "md", "mdx", "csv", "json", "yaml", "yml", "xml", "html", "htm", "pdf", "docx", "py", "sh", "sql", "js", "ts", "tsx", "jpg", "jpeg", "png", "bmp", "image"], "list": false, "required": false, "placeholder": "", "show": true, "name": "referenceTask", "value": "DALL\u00b7E 2024-10-24 09.09.20 - A colourful cartoon of a unicorn wearing a traditional black graduation trencher cap, with only the head and shoulders visible to give it a profile pi.png", "display_name": "Reference Task", "advanced": true, "dynamic": false, "info": "Reference task file to be sent with the message.", "title_case": false, "type": "file", "_input_type": "FileInput"}, "studentTask": {"trace_as_metadata": true, "file_path": "3fa71f8c-d346-4eec-8094-d7349086bda4/2024-11-19_12-13-24_Lesson 4  - Addressing Task - Reference Slides.png", "fileTypes": ["txt", "md", "mdx", "csv", "json", "yaml", "yml", "xml", "html", "htm", "pdf", "docx", "py", "sh", "sql", "js", "ts", "tsx", "jpg", "jpeg", "png", "bmp", "image"], "list": false, "required": false, "placeholder": "", "show": true, "name": "studentTask", "value": "Lesson 4  - Addressing Task - Reference Slides.png", "display_name": "Student Task", "advanced": true, "dynamic": false, "info": "Student task file to be sent with the message.", "title_case": false, "type": "file", "_input_type": "FileInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\r\nfrom langflow.base.io.chat import ChatComponent\r\nfrom langflow.inputs import BoolInput\r\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\r\nfrom langflow.memory import store_message\r\nfrom langflow.schema.message import Message\r\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_USER, MESSAGE_SENDER_USER\r\n\r\nclass ChatInput(ChatComponent):\r\n    display_name = \"Chat Input\"\r\n    description = \"Get chat inputs from the Playground.\"\r\n    icon = \"ChatInput\"\r\n    name = \"ChatInput\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Text\",\r\n            value=\"\",\r\n            info=\"Message to be passed as input.\",\r\n        ),\r\n        BoolInput(\r\n            name=\"should_store_message\",\r\n            display_name=\"Store Messages\",\r\n            info=\"Store the message in the history.\",\r\n            value=True,\r\n            advanced=True,\r\n        ),\r\n        DropdownInput(\r\n            name=\"sender\",\r\n            display_name=\"Sender Type\",\r\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\r\n            value=MESSAGE_SENDER_USER,\r\n            info=\"Type of sender.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"sender_name\",\r\n            display_name=\"Sender Name\",\r\n            info=\"Name of the sender.\",\r\n            value=MESSAGE_SENDER_NAME_USER,\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"session_id\",\r\n            display_name=\"Session ID\",\r\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\r\n            advanced=True,\r\n        ),\r\n        FileInput(\r\n            name=\"referenceTask\",\r\n            display_name=\"Reference Task\",\r\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\r\n            info=\"Reference task file to be sent with the message.\",\r\n            advanced=True,\r\n            is_list=False,\r\n        ),\r\n        FileInput(\r\n            name=\"studentTask\",\r\n            display_name=\"Student Task\",\r\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\r\n            info=\"Student task file to be sent with the message.\",\r\n            advanced=True,\r\n            is_list=False,\r\n        ),\r\n        FileInput(\r\n            name=\"emptyTask\",\r\n            display_name=\"Empty Task\",\r\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\r\n            info=\"Empty task file to be sent with the message.\",\r\n            advanced=True,\r\n            is_list=False,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\r\n    ]\r\n\r\n    def message_response(self) -> Message:\r\n        # Collect all specified files into a list\r\n        files = []\r\n        for file_name in [\"referenceTask\", \"studentTask\", \"emptyTask\"]:\r\n            file = getattr(self, file_name, None)\r\n            if file:\r\n                files.append(file)\r\n\r\n        # Create the Message object with the list of files\r\n        message = Message(\r\n            text=self.input_value,\r\n            sender=self.sender,\r\n            sender_name=self.sender_name,\r\n            session_id=self.session_id,\r\n            files=files,  # Assign the collected list of files\r\n        )\r\n\r\n        # Store the message if required\r\n        if (\r\n            self.session_id\r\n            and isinstance(message, Message)\r\n            and isinstance(message.text, str)\r\n            and self.should_store_message\r\n        ):\r\n            store_message(\r\n                message,\r\n                flow_id=self.graph.flow_id,\r\n            )\r\n            self.message.value = message\r\n\r\n        # Update the component status\r\n        self.status = message\r\n        return message\r\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "input_value": {"trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "input_value", "value": "Here", "display_name": "Text", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Message to be passed as input.", "title_case": false, "type": "str", "_input_type": "MultilineInput"}, "sender": {"trace_as_metadata": true, "options": ["Machine", "User"], "combobox": false, "required": false, "placeholder": "", "show": true, "name": "sender", "value": "User", "display_name": "Sender Type", "advanced": true, "dynamic": false, "info": "Type of sender.", "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "sender_name": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "sender_name", "value": "User", "display_name": "Sender Name", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Name of the sender.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "session_id": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "session_id", "value": "", "display_name": "Session ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "should_store_message": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "should_store_message", "value": true, "display_name": "Store Messages", "advanced": true, "dynamic": false, "info": "Store the message in the history.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}}, "description": "Get chat inputs from the Playground.", "icon": "ChatInput", "base_classes": ["Message"], "display_name": "Image with reference slides", "documentation": "", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "message", "display_name": "Message", "method": "message_response", "value": "__UNDEFINED__", "cache": true}], "field_order": ["input_value", "should_store_message", "sender", "sender_name", "session_id", "referenceTask", "studentTask", "emptyTask"], "beta": false, "edited": true, "metadata": {}, "lf_version": "1.1.0.dev4", "official": false}, "id": "ChatInput-OxxOw"}, "id": "ChatInput-OxxOw", "position": {"x": 0, "y": 0}, "type": "genericNode"}], "viewport": {"x": 1, "y": 1, "zoom": 1}}, "is_component": true, "updated_at": "2024-11-19T13:09:10+00:00", "webhook": false, "endpoint_name": null, "tags": null, "id": "80bb70ad-8da7-4216-8bd7-a7a772dcc1aa", "user_id": "caa058bd-de23-4fe7-a9e6-8ff0f504acb9", "folder_id": "a092b345-ccd3-49a9-bd10-39aa8725e76c"}