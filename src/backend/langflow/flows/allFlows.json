{
    "flows": [
        {
            "name": "Warm Up Flow",
            "description": "This is a dummy flow that doesn't do anything but runs to warm up the Google Cloud Run instance ",
            "icon": null,
            "icon_bg_color": null,
            "gradient": null,
            "data": {
                "nodes": [
                    {
                        "id": "ChatInput-c6iQO",
                        "type": "genericNode",
                        "position": {
                            "x": -332.12585487680974,
                            "y": -202.52418005372328
                        },
                        "data": {
                            "type": "ChatInput",
                            "node": {
                                "template": {
                                    "_type": "Component",
                                    "files": {
                                        "trace_as_metadata": true,
                                        "file_path": "",
                                        "fileTypes": [
                                            "txt",
                                            "md",
                                            "mdx",
                                            "csv",
                                            "json",
                                            "yaml",
                                            "yml",
                                            "xml",
                                            "html",
                                            "htm",
                                            "pdf",
                                            "docx",
                                            "py",
                                            "sh",
                                            "sql",
                                            "js",
                                            "ts",
                                            "tsx",
                                            "jpg",
                                            "jpeg",
                                            "png",
                                            "bmp",
                                            "image"
                                        ],
                                        "list": true,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "files",
                                        "value": "",
                                        "display_name": "Files",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Files to be sent with the message.",
                                        "title_case": false,
                                        "type": "file",
                                        "_input_type": "FileInput"
                                    },
                                    "code": {
                                        "type": "code",
                                        "required": true,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_USER, MESSAGE_SENDER_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "code",
                                        "advanced": true,
                                        "dynamic": true,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false
                                    },
                                    "input_value": {
                                        "trace_as_input": true,
                                        "multiline": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "input_value",
                                        "value": "",
                                        "display_name": "Text",
                                        "advanced": false,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Message to be passed as input.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MultilineInput"
                                    },
                                    "sender": {
                                        "trace_as_metadata": true,
                                        "options": [
                                            "Machine",
                                            "User"
                                        ],
                                        "combobox": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "sender",
                                        "value": "User",
                                        "display_name": "Sender Type",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Type of sender.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "DropdownInput"
                                    },
                                    "sender_name": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "sender_name",
                                        "value": "User",
                                        "display_name": "Sender Name",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Name of the sender.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "session_id": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "session_id",
                                        "value": "",
                                        "display_name": "Session ID",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "should_store_message": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "should_store_message",
                                        "value": true,
                                        "display_name": "Store Messages",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Store the message in the history.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput"
                                    }
                                },
                                "description": "Get chat inputs from the Playground.",
                                "icon": "ChatInput",
                                "base_classes": [
                                    "Message"
                                ],
                                "display_name": "Chat Input",
                                "documentation": "",
                                "custom_fields": {},
                                "output_types": [],
                                "pinned": false,
                                "conditional_paths": [],
                                "frozen": false,
                                "outputs": [
                                    {
                                        "types": [
                                            "Message"
                                        ],
                                        "selected": "Message",
                                        "name": "message",
                                        "display_name": "Message",
                                        "method": "message_response",
                                        "value": "__UNDEFINED__",
                                        "cache": true
                                    }
                                ],
                                "field_order": [
                                    "input_value",
                                    "should_store_message",
                                    "sender",
                                    "sender_name",
                                    "session_id",
                                    "files"
                                ],
                                "beta": false,
                                "edited": false,
                                "metadata": {}
                            },
                            "id": "ChatInput-c6iQO",
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input"
                        },
                        "selected": true,
                        "width": 384,
                        "height": 289,
                        "dragging": false
                    },
                    {
                        "id": "ChatOutput-BcQ8X",
                        "type": "genericNode",
                        "position": {
                            "x": 239.22107048785344,
                            "y": -173.4950060167196
                        },
                        "data": {
                            "type": "ChatOutput",
                            "node": {
                                "template": {
                                    "_type": "Component",
                                    "code": {
                                        "type": "code",
                                        "required": true,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "code",
                                        "advanced": true,
                                        "dynamic": true,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false
                                    },
                                    "data_template": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "data_template",
                                        "value": "{text}",
                                        "display_name": "Data Template",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "input_value": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "input_value",
                                        "value": "",
                                        "display_name": "Text",
                                        "advanced": false,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Message to be passed as output.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "sender": {
                                        "trace_as_metadata": true,
                                        "options": [
                                            "Machine",
                                            "User"
                                        ],
                                        "combobox": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "sender",
                                        "value": "Machine",
                                        "display_name": "Sender Type",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Type of sender.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "DropdownInput"
                                    },
                                    "sender_name": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "sender_name",
                                        "value": "AI",
                                        "display_name": "Sender Name",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Name of the sender.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "session_id": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "session_id",
                                        "value": "",
                                        "display_name": "Session ID",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "should_store_message": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "should_store_message",
                                        "value": true,
                                        "display_name": "Store Messages",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Store the message in the history.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput"
                                    }
                                },
                                "description": "Display a chat message in the Playground.",
                                "icon": "ChatOutput",
                                "base_classes": [
                                    "Message"
                                ],
                                "display_name": "Chat Output",
                                "documentation": "",
                                "custom_fields": {},
                                "output_types": [],
                                "pinned": false,
                                "conditional_paths": [],
                                "frozen": false,
                                "outputs": [
                                    {
                                        "types": [
                                            "Message"
                                        ],
                                        "selected": "Message",
                                        "name": "message",
                                        "display_name": "Message",
                                        "method": "message_response",
                                        "value": "__UNDEFINED__",
                                        "cache": true
                                    }
                                ],
                                "field_order": [
                                    "input_value",
                                    "should_store_message",
                                    "sender",
                                    "sender_name",
                                    "session_id",
                                    "data_template"
                                ],
                                "beta": false,
                                "edited": false,
                                "metadata": {}
                            },
                            "id": "ChatOutput-BcQ8X",
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output"
                        },
                        "selected": false,
                        "width": 384,
                        "height": 289
                    }
                ],
                "edges": [
                    {
                        "source": "ChatInput-c6iQO",
                        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-c6iQOœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
                        "target": "ChatOutput-BcQ8X",
                        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-BcQ8Xœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                        "data": {
                            "targetHandle": {
                                "fieldName": "input_value",
                                "id": "ChatOutput-BcQ8X",
                                "inputTypes": [
                                    "Message"
                                ],
                                "type": "str"
                            },
                            "sourceHandle": {
                                "dataType": "ChatInput",
                                "id": "ChatInput-c6iQO",
                                "name": "message",
                                "output_types": [
                                    "Message"
                                ]
                            }
                        },
                        "id": "reactflow__edge-ChatInput-c6iQO{œdataTypeœ:œChatInputœ,œidœ:œChatInput-c6iQOœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-BcQ8X{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-BcQ8Xœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                        "className": ""
                    }
                ],
                "viewport": {
                    "x": 378.85149765505,
                    "y": 465.88754347428375,
                    "zoom": 0.9972579043614018
                }
            },
            "is_component": false,
            "updated_at": "2024-10-08T10:14:58+00:00",
            "webhook": false,
            "endpoint_name": "warmUp",
            "tags": null,
            "id": "df9a3b10-e904-4f52-a314-30fb93104dde",
            "user_id": "262f2705-7707-437e-86c4-f47acc20addd",
            "folder_id": "f8b09064-fe73-4596-bf22-31bdb86a7282"
        },
        {
            "name": "Table Assessor Flow",
            "description": "Empowering Communication, Enabling Opportunities.",
            "icon": null,
            "icon_bg_color": null,
            "gradient": null,
            "data": {
                "nodes": [
                    {
                        "id": "ChatOutput-bROnY",
                        "type": "genericNode",
                        "position": {
                            "x": 2103.433423469548,
                            "y": 378.8351340317354
                        },
                        "data": {
                            "type": "ChatOutput",
                            "node": {
                                "template": {
                                    "_type": "Component",
                                    "code": {
                                        "type": "code",
                                        "required": true,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "code",
                                        "advanced": true,
                                        "dynamic": true,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false
                                    },
                                    "data_template": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "data_template",
                                        "value": "{text}",
                                        "display_name": "Data Template",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "input_value": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "input_value",
                                        "value": "",
                                        "display_name": "Text",
                                        "advanced": false,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Message to be passed as output.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "sender": {
                                        "trace_as_metadata": true,
                                        "options": [
                                            "Machine",
                                            "User"
                                        ],
                                        "combobox": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "sender",
                                        "value": "Machine",
                                        "display_name": "Sender Type",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Type of sender.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "DropdownInput"
                                    },
                                    "sender_name": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "sender_name",
                                        "value": "AI",
                                        "display_name": "Sender Name",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Name of the sender.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "session_id": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "session_id",
                                        "value": "",
                                        "display_name": "Session ID",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "should_store_message": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "should_store_message",
                                        "value": true,
                                        "display_name": "Store Messages",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Store the message in the history.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput"
                                    }
                                },
                                "description": "Display a chat message in the Playground.",
                                "icon": "ChatOutput",
                                "base_classes": [
                                    "Message"
                                ],
                                "display_name": "Chat Output",
                                "documentation": "",
                                "custom_fields": {},
                                "output_types": [],
                                "pinned": false,
                                "conditional_paths": [],
                                "frozen": false,
                                "outputs": [
                                    {
                                        "types": [
                                            "Message"
                                        ],
                                        "selected": "Message",
                                        "name": "message",
                                        "display_name": "Message",
                                        "method": "message_response",
                                        "value": "__UNDEFINED__",
                                        "cache": true
                                    }
                                ],
                                "field_order": [
                                    "input_value",
                                    "should_store_message",
                                    "sender",
                                    "sender_name",
                                    "session_id",
                                    "data_template"
                                ],
                                "beta": false,
                                "edited": false,
                                "metadata": {},
                                "lf_version": "1.0.18"
                            },
                            "id": "ChatOutput-bROnY",
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output"
                        },
                        "selected": false,
                        "width": 384,
                        "height": 289,
                        "positionAbsolute": {
                            "x": 2103.433423469548,
                            "y": 378.8351340317354
                        },
                        "dragging": false
                    },
                    {
                        "id": "Prompt-JcIIu",
                        "type": "genericNode",
                        "position": {
                            "x": 394.1001341242294,
                            "y": 76.38855025857683
                        },
                        "data": {
                            "type": "Prompt",
                            "node": {
                                "template": {
                                    "_type": "Component",
                                    "code": {
                                        "type": "code",
                                        "required": true,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "code",
                                        "advanced": true,
                                        "dynamic": true,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false
                                    },
                                    "template": {
                                        "trace_as_input": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "template",
                                        "value": "## Reference Task\n### This task would score 5 across all criteria\n{referenceTask}\n\n## Empty Task\n### This task would score 0 across all criteria\n{emptyTask}\n\n## Student Task\n### This is the task you are assessing\n{studentTask}\n\n# Task\n\nCompare the student task with the reference and empty tasks. For each key, assess and score the student response based on the following criteria:\n\n1. **Completeness** (0-5):  \n   - Score 0 for if it matches the emtpy task.\n   - Score 5 if as detailed as the reference task.\n\n2. **Accuracy** (0-5):  \n   - Score 0 if it matches the empty task.\n   - Score 5 if it matches the reference task in accuracy and detail.\n\n3. **Spelling, Punctuation, and Grammar (SPaG)** (0-5):  \n   - Score 0 if entirely incorrect.\n   - Score 5 for flawless SPaG.\n\n\n\nProvide a short reasoning for each score, no longer than one sentence. Output using the following JSON structure:\n\n{examples}\n\n*IMPORTANT*\n-  In all cases, assess only the content that differs from the empty slide. The empty slide contains the template that students will write on.\n- Only ever output a JSON object following the structure set out in the examples above exactly.",
                                        "display_name": "Template",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "",
                                        "title_case": false,
                                        "type": "prompt",
                                        "_input_type": "PromptInput"
                                    },
                                    "referenceTask": {
                                        "field_type": "str",
                                        "required": false,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "Use this tweakID for the refrenceTask",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "referenceTask",
                                        "display_name": "referenceTask",
                                        "advanced": false,
                                        "input_types": [
                                            "Message",
                                            "Text"
                                        ],
                                        "dynamic": false,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false,
                                        "type": "str"
                                    },
                                    "emptyTask": {
                                        "field_type": "str",
                                        "required": false,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "Use this tweakId for the Empty Task",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "emptyTask",
                                        "display_name": "emptyTask",
                                        "advanced": false,
                                        "input_types": [
                                            "Message",
                                            "Text"
                                        ],
                                        "dynamic": false,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false,
                                        "type": "str"
                                    },
                                    "studentTask": {
                                        "field_type": "str",
                                        "required": false,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "studentTask",
                                        "display_name": "studentTask",
                                        "advanced": false,
                                        "input_types": [
                                            "Message",
                                            "Text"
                                        ],
                                        "dynamic": false,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false,
                                        "type": "str"
                                    },
                                    "examples": {
                                        "field_type": "str",
                                        "required": false,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "```json\n{\n    \"completeness\" : {\n        \"score\": {score},\n        \"reasoning\": \"{reasoning}\"\n    },\n    \"accuracy\" : {\n        \"score\": {score},\n        \"reasoning\": \"{reasoning}\"\n    },\n    \"spag\" : {\n        \"score\": {score},\n        \"reasoning\": \"{reasoning}\"\n    }\n}\n```\n\n## Examples:\n\n### Example 1: Partially correct student task\n\n```json\n{\n  \"completeness\": {\n    \"score\": 2,\n    \"reasoning\": \"Partially answered, missing key details.\"\n  },\n  \"accuracy\": {\n    \"score\": 3,\n    \"reasoning\": \"Mostly correct with minor errors.\"\n  },\n  \"spag\": {\n    \"score\": 4,\n    \"reasoning\": \"Good SPaG with few errors.\"\n  }\n}\n```\n\n### Example 2: Student task as good or better than the reference task\n\n```json\n{\n  \"completeness\": {\n    \"score\": 5,\n    \"reasoning\": \"Thorough and complete.\"\n  },\n  \"accuracy\": {\n    \"score\": 5,\n    \"reasoning\": \"All details are accurate.\"\n  },\n  \"spag\": {\n    \"score\": 5,\n    \"reasoning\": \"Flawless SPaG.\"\n  }\n}\n```\n\n### Example 3: No attempt made by the student\n\n```json\n{\n  \"completeness\": {\n    \"score\": 0,\n    \"reasoning\": \"No content provided.\"\n  },\n  \"accuracy\": {\n    \"score\": 0,\n    \"reasoning\": \"No content provided.\"\n  },\n  \"spag\": {\n    \"score\": 0,\n    \"reasoning\": \"No content provided.\"\n  }\n}",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "examples",
                                        "display_name": "examples",
                                        "advanced": false,
                                        "input_types": [
                                            "Message",
                                            "Text"
                                        ],
                                        "dynamic": false,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false,
                                        "type": "str"
                                    }
                                },
                                "description": "Create a prompt template with dynamic variables.",
                                "icon": "prompts",
                                "is_input": null,
                                "is_output": null,
                                "is_composition": null,
                                "base_classes": [
                                    "Message"
                                ],
                                "name": "",
                                "display_name": "Prompt",
                                "documentation": "",
                                "custom_fields": {
                                    "template": [
                                        "referenceTask",
                                        "emptyTask",
                                        "studentTask",
                                        "examples"
                                    ]
                                },
                                "output_types": [],
                                "full_path": null,
                                "pinned": false,
                                "conditional_paths": [],
                                "frozen": false,
                                "outputs": [
                                    {
                                        "types": [
                                            "Message"
                                        ],
                                        "selected": "Message",
                                        "name": "prompt",
                                        "hidden": null,
                                        "display_name": "Prompt Message",
                                        "method": "build_prompt",
                                        "value": "__UNDEFINED__",
                                        "cache": true
                                    }
                                ],
                                "field_order": [
                                    "template"
                                ],
                                "beta": false,
                                "error": null,
                                "edited": false,
                                "lf_version": "1.0.18"
                            },
                            "id": "Prompt-JcIIu"
                        },
                        "selected": false,
                        "width": 384,
                        "height": 649,
                        "positionAbsolute": {
                            "x": 394.1001341242294,
                            "y": 76.38855025857683
                        },
                        "dragging": false
                    },
                    {
                        "id": "GoogleGenerativeAIModel-yqQGb",
                        "type": "genericNode",
                        "position": {
                            "x": 952.9935957603411,
                            "y": 60.718640119246544
                        },
                        "data": {
                            "type": "GoogleGenerativeAIModel",
                            "node": {
                                "template": {
                                    "_type": "Component",
                                    "output_parser": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "output_parser",
                                        "value": "",
                                        "display_name": "Output Parser",
                                        "advanced": true,
                                        "input_types": [
                                            "OutputParser"
                                        ],
                                        "dynamic": false,
                                        "info": "The parser to use to parse the output of the model",
                                        "title_case": false,
                                        "type": "other",
                                        "_input_type": "HandleInput"
                                    },
                                    "code": {
                                        "type": "code",
                                        "required": true,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "from pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import DropdownInput, FloatInput, IntInput, SecretStrInput\nfrom langflow.inputs.inputs import HandleInput\n\n\nclass GoogleGenerativeAIComponent(LCModelComponent):\n    display_name = \"Google Generative AI\"\n    description = \"Generate text using Google Generative AI.\"\n    icon = \"GoogleGenerativeAI\"\n    name = \"GoogleGenerativeAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_output_tokens\", display_name=\"Max Output Tokens\", info=\"The maximum number of tokens to generate.\"\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            info=\"The name of the model to use.\",\n            options=[\"gemini-1.5-pro\", \"gemini-1.5-flash\", \"gemini-1.0-pro\", \"gemini-1.0-pro-vision\"],\n            value=\"gemini-1.5-pro\",\n        ),\n        SecretStrInput(\n            name=\"google_api_key\",\n            display_name=\"Google API Key\",\n            info=\"The Google API Key to use for the Google Generative AI.\",\n        ),\n        FloatInput(\n            name=\"top_p\",\n            display_name=\"Top P\",\n            info=\"The maximum cumulative probability of tokens to consider when sampling.\",\n            advanced=True,\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"n\",\n            display_name=\"N\",\n            info=\"Number of chat completions to generate for each prompt. \"\n            \"Note that the API may not return the full n completions if duplicates are generated.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"top_k\",\n            display_name=\"Top K\",\n            info=\"Decode using top-k sampling: consider the set of top_k most probable tokens. Must be positive.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"output_parser\",\n            display_name=\"Output Parser\",\n            info=\"The parser to use to parse the output of the model\",\n            advanced=True,\n            input_types=[\"OutputParser\"],\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        try:\n            from langchain_google_genai import ChatGoogleGenerativeAI\n        except ImportError as e:\n            msg = \"The 'langchain_google_genai' package is required to use the Google Generative AI model.\"\n            raise ImportError(msg) from e\n\n        google_api_key = self.google_api_key\n        model = self.model\n        max_output_tokens = self.max_output_tokens\n        temperature = self.temperature\n        top_k = self.top_k\n        top_p = self.top_p\n        n = self.n\n\n        return ChatGoogleGenerativeAI(  # type: ignore\n            model=model,\n            max_output_tokens=max_output_tokens or None,\n            temperature=temperature,\n            top_k=top_k or None,\n            top_p=top_p or None,\n            n=n or 1,\n            google_api_key=SecretStr(google_api_key),\n        )\n",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "code",
                                        "advanced": true,
                                        "dynamic": true,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false
                                    },
                                    "google_api_key": {
                                        "load_from_db": true,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "google_api_key",
                                        "value": "GOOGLE_API_KEY",
                                        "display_name": "Google API Key",
                                        "advanced": false,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "The Google API Key to use for the Google Generative AI.",
                                        "title_case": false,
                                        "password": true,
                                        "type": "str",
                                        "_input_type": "SecretStrInput"
                                    },
                                    "input_value": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "input_value",
                                        "value": "",
                                        "display_name": "Input",
                                        "advanced": false,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageInput"
                                    },
                                    "max_output_tokens": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "max_output_tokens",
                                        "value": "",
                                        "display_name": "Max Output Tokens",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "The maximum number of tokens to generate.",
                                        "title_case": false,
                                        "type": "int",
                                        "_input_type": "IntInput"
                                    },
                                    "model": {
                                        "trace_as_metadata": true,
                                        "options": [
                                            "gemini-1.5-pro",
                                            "gemini-1.5-flash",
                                            "gemini-1.0-pro",
                                            "gemini-1.0-pro-vision"
                                        ],
                                        "combobox": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "model",
                                        "value": "gemini-1.5-flash",
                                        "display_name": "Model",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "The name of the model to use.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "DropdownInput",
                                        "load_from_db": false
                                    },
                                    "n": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "n",
                                        "value": "",
                                        "display_name": "N",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.",
                                        "title_case": false,
                                        "type": "int",
                                        "_input_type": "IntInput"
                                    },
                                    "stream": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "stream",
                                        "value": false,
                                        "display_name": "Stream",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Stream the response from the model. Streaming works only in Chat.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput"
                                    },
                                    "system_message": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "system_message",
                                        "value": "",
                                        "display_name": "System Message",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "System message to pass to the model.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "temperature": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "temperature",
                                        "value": "0",
                                        "display_name": "Temperature",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "",
                                        "title_case": false,
                                        "type": "float",
                                        "_input_type": "FloatInput",
                                        "load_from_db": false
                                    },
                                    "top_k": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "top_k",
                                        "value": "",
                                        "display_name": "Top K",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Decode using top-k sampling: consider the set of top_k most probable tokens. Must be positive.",
                                        "title_case": false,
                                        "type": "int",
                                        "_input_type": "IntInput"
                                    },
                                    "top_p": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "top_p",
                                        "value": "",
                                        "display_name": "Top P",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "The maximum cumulative probability of tokens to consider when sampling.",
                                        "title_case": false,
                                        "type": "float",
                                        "_input_type": "FloatInput"
                                    }
                                },
                                "description": "Generate text using Google Generative AI.",
                                "icon": "GoogleGenerativeAI",
                                "base_classes": [
                                    "LanguageModel",
                                    "Message"
                                ],
                                "display_name": "Google Generative AI",
                                "documentation": "",
                                "custom_fields": {},
                                "output_types": [],
                                "pinned": false,
                                "conditional_paths": [],
                                "frozen": false,
                                "outputs": [
                                    {
                                        "types": [
                                            "Message"
                                        ],
                                        "selected": "Message",
                                        "name": "text_output",
                                        "display_name": "Text",
                                        "method": "text_response",
                                        "value": "__UNDEFINED__",
                                        "cache": true,
                                        "required_inputs": [
                                            "input_value",
                                            "stream",
                                            "system_message"
                                        ]
                                    },
                                    {
                                        "types": [
                                            "LanguageModel"
                                        ],
                                        "selected": "LanguageModel",
                                        "name": "model_output",
                                        "display_name": "Language Model",
                                        "method": "build_model",
                                        "value": "__UNDEFINED__",
                                        "cache": true,
                                        "required_inputs": [
                                            "google_api_key",
                                            "max_output_tokens",
                                            "model",
                                            "n",
                                            "temperature",
                                            "top_k",
                                            "top_p"
                                        ]
                                    }
                                ],
                                "field_order": [
                                    "input_value",
                                    "system_message",
                                    "stream",
                                    "max_output_tokens",
                                    "model",
                                    "google_api_key",
                                    "top_p",
                                    "temperature",
                                    "n",
                                    "top_k",
                                    "output_parser"
                                ],
                                "beta": false,
                                "edited": false,
                                "metadata": {}
                            },
                            "id": "GoogleGenerativeAIModel-yqQGb",
                            "description": "Generate text using Google Generative AI.",
                            "display_name": "Google Generative AI"
                        },
                        "selected": false,
                        "width": 384,
                        "height": 673,
                        "positionAbsolute": {
                            "x": 952.9935957603411,
                            "y": 60.718640119246544
                        },
                        "dragging": false
                    },
                    {
                        "id": "JSONCleaner-49kgY",
                        "type": "genericNode",
                        "position": {
                            "x": 1624.1539665758087,
                            "y": 57.96614268931168
                        },
                        "data": {
                            "type": "JSONCleaner",
                            "node": {
                                "template": {
                                    "_type": "Component",
                                    "code": {
                                        "type": "code",
                                        "required": true,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "import json\nimport re\nimport unicodedata\n\nfrom langflow.custom import Component\nfrom langflow.inputs import BoolInput, MessageTextInput\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\n\n\nclass JSONCleaner(Component):\n    display_name = \"JSON Cleaner\"\n    description = (\n        \"Cleans the messy and sometimes incorrect JSON strings produced by LLMs \"\n        \"so that they are fully compliant with the JSON spec.\"\n    )\n    icon = \"custom_components\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"json_str\", display_name=\"JSON String\", info=\"The JSON string to be cleaned.\", required=True\n        ),\n        BoolInput(\n            name=\"remove_control_chars\",\n            display_name=\"Remove Control Characters\",\n            info=\"Remove control characters from the JSON string.\",\n            required=False,\n        ),\n        BoolInput(\n            name=\"normalize_unicode\",\n            display_name=\"Normalize Unicode\",\n            info=\"Normalize Unicode characters in the JSON string.\",\n            required=False,\n        ),\n        BoolInput(\n            name=\"validate_json\",\n            display_name=\"Validate JSON\",\n            info=\"Validate the JSON string to ensure it is well-formed.\",\n            required=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Cleaned JSON String\", name=\"output\", method=\"clean_json\"),\n    ]\n\n    def clean_json(self) -> Message:\n        try:\n            from json_repair import repair_json  # type: ignore\n        except ImportError as e:\n            msg = \"Could not import the json_repair package. Please install it with `pip install json_repair`.\"\n            raise ImportError(msg) from e\n\n        \"\"\"Clean the input JSON string based on provided options and return the cleaned JSON string.\"\"\"\n        json_str = self.json_str\n        remove_control_chars = self.remove_control_chars\n        normalize_unicode = self.normalize_unicode\n        validate_json = self.validate_json\n\n        try:\n            start = json_str.find(\"{\")\n            end = json_str.rfind(\"}\")\n            if start == -1 or end == -1:\n                msg = \"Invalid JSON string: Missing '{' or '}'\"\n                raise ValueError(msg)\n            json_str = json_str[start : end + 1]\n\n            if remove_control_chars:\n                json_str = self._remove_control_characters(json_str)\n            if normalize_unicode:\n                json_str = self._normalize_unicode(json_str)\n            if validate_json:\n                json_str = self._validate_json(json_str)\n\n            cleaned_json_str = repair_json(json_str)\n            result = str(cleaned_json_str)\n\n            self.status = result\n            return Message(text=result)\n        except Exception as e:\n            msg = f\"Error cleaning JSON string: {e}\"\n            raise ValueError(msg) from e\n\n    def _remove_control_characters(self, s: str) -> str:\n        \"\"\"Remove control characters from the string.\"\"\"\n        return re.sub(r\"[\\x00-\\x1F\\x7F]\", \"\", s)\n\n    def _normalize_unicode(self, s: str) -> str:\n        \"\"\"Normalize Unicode characters in the string.\"\"\"\n        return unicodedata.normalize(\"NFC\", s)\n\n    def _validate_json(self, s: str) -> str:\n        \"\"\"Validate the JSON string.\"\"\"\n        try:\n            json.loads(s)\n            return s\n        except json.JSONDecodeError as e:\n            msg = f\"Invalid JSON string: {e}\"\n            raise ValueError(msg) from e\n",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "code",
                                        "advanced": true,
                                        "dynamic": true,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false
                                    },
                                    "json_str": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": true,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "json_str",
                                        "value": "",
                                        "display_name": "JSON String",
                                        "advanced": false,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "The JSON string to be cleaned.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "normalize_unicode": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "normalize_unicode",
                                        "value": true,
                                        "display_name": "Normalize Unicode",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "Normalize Unicode characters in the JSON string.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput",
                                        "load_from_db": false
                                    },
                                    "remove_control_chars": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "remove_control_chars",
                                        "value": true,
                                        "display_name": "Remove Control Characters",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "Remove control characters from the JSON string.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput",
                                        "load_from_db": false
                                    },
                                    "validate_json": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "validate_json",
                                        "value": false,
                                        "display_name": "Validate JSON",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "Validate the JSON string to ensure it is well-formed.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput"
                                    }
                                },
                                "description": "Cleans the messy and sometimes incorrect JSON strings produced by LLMs so that they are fully compliant with the JSON spec.",
                                "icon": "custom_components",
                                "base_classes": [
                                    "Message"
                                ],
                                "display_name": "JSON Cleaner",
                                "documentation": "",
                                "custom_fields": {},
                                "output_types": [],
                                "pinned": false,
                                "conditional_paths": [],
                                "frozen": false,
                                "outputs": [
                                    {
                                        "types": [
                                            "Message"
                                        ],
                                        "selected": "Message",
                                        "name": "output",
                                        "display_name": "Cleaned JSON String",
                                        "method": "clean_json",
                                        "value": "__UNDEFINED__",
                                        "cache": true
                                    }
                                ],
                                "field_order": [
                                    "json_str",
                                    "remove_control_chars",
                                    "normalize_unicode",
                                    "validate_json"
                                ],
                                "beta": false,
                                "edited": false,
                                "metadata": {}
                            },
                            "id": "JSONCleaner-49kgY",
                            "description": "Cleans the messy and sometimes incorrect JSON strings produced by LLMs so that they are fully compliant with the JSON spec.",
                            "display_name": "JSON Cleaner"
                        },
                        "selected": false,
                        "width": 384,
                        "height": 537,
                        "dragging": false
                    },
                    {
                        "id": "ChatInput-o1IK6",
                        "type": "genericNode",
                        "position": {
                            "x": -167.4858180405147,
                            "y": 324.61336058364617
                        },
                        "data": {
                            "type": "ChatInput",
                            "node": {
                                "template": {
                                    "_type": "Component",
                                    "files": {
                                        "trace_as_metadata": true,
                                        "file_path": "",
                                        "fileTypes": [
                                            "txt",
                                            "md",
                                            "mdx",
                                            "csv",
                                            "json",
                                            "yaml",
                                            "yml",
                                            "xml",
                                            "html",
                                            "htm",
                                            "pdf",
                                            "docx",
                                            "py",
                                            "sh",
                                            "sql",
                                            "js",
                                            "ts",
                                            "tsx",
                                            "jpg",
                                            "jpeg",
                                            "png",
                                            "bmp",
                                            "image"
                                        ],
                                        "list": true,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "files",
                                        "value": "",
                                        "display_name": "Files",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Files to be sent with the message.",
                                        "title_case": false,
                                        "type": "file",
                                        "_input_type": "FileInput"
                                    },
                                    "code": {
                                        "type": "code",
                                        "required": true,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_USER, MESSAGE_SENDER_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "code",
                                        "advanced": true,
                                        "dynamic": true,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false
                                    },
                                    "input_value": {
                                        "trace_as_input": true,
                                        "multiline": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "input_value",
                                        "value": "",
                                        "display_name": "Text",
                                        "advanced": false,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Message to be passed as input.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MultilineInput"
                                    },
                                    "sender": {
                                        "trace_as_metadata": true,
                                        "options": [
                                            "Machine",
                                            "User"
                                        ],
                                        "combobox": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "sender",
                                        "value": "User",
                                        "display_name": "Sender Type",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Type of sender.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "DropdownInput"
                                    },
                                    "sender_name": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "sender_name",
                                        "value": "User",
                                        "display_name": "Sender Name",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Name of the sender.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "session_id": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "session_id",
                                        "value": "",
                                        "display_name": "Session ID",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "should_store_message": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "should_store_message",
                                        "value": true,
                                        "display_name": "Store Messages",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Store the message in the history.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput"
                                    }
                                },
                                "description": "Get chat inputs from the Playground.",
                                "icon": "ChatInput",
                                "base_classes": [
                                    "Message"
                                ],
                                "display_name": "Chat Input",
                                "documentation": "",
                                "custom_fields": {},
                                "output_types": [],
                                "pinned": false,
                                "conditional_paths": [],
                                "frozen": false,
                                "outputs": [
                                    {
                                        "types": [
                                            "Message"
                                        ],
                                        "selected": "Message",
                                        "name": "message",
                                        "display_name": "Message",
                                        "method": "message_response",
                                        "value": "__UNDEFINED__",
                                        "cache": true
                                    }
                                ],
                                "field_order": [
                                    "input_value",
                                    "should_store_message",
                                    "sender",
                                    "sender_name",
                                    "session_id",
                                    "files"
                                ],
                                "beta": false,
                                "edited": false,
                                "metadata": {},
                                "lf_version": "1.0.18"
                            },
                            "id": "ChatInput-o1IK6",
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input"
                        },
                        "selected": false,
                        "width": 384,
                        "height": 289,
                        "positionAbsolute": {
                            "x": -167.4858180405147,
                            "y": 324.61336058364617
                        },
                        "dragging": false
                    }
                ],
                "edges": [
                    {
                        "source": "Prompt-JcIIu",
                        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-JcIIuœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                        "target": "GoogleGenerativeAIModel-yqQGb",
                        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œGoogleGenerativeAIModel-yqQGbœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                        "data": {
                            "targetHandle": {
                                "fieldName": "input_value",
                                "id": "GoogleGenerativeAIModel-yqQGb",
                                "inputTypes": [
                                    "Message"
                                ],
                                "type": "str"
                            },
                            "sourceHandle": {
                                "dataType": "Prompt",
                                "id": "Prompt-JcIIu",
                                "name": "prompt",
                                "output_types": [
                                    "Message"
                                ]
                            }
                        },
                        "id": "reactflow__edge-Prompt-JcIIu{œdataTypeœ:œPromptœ,œidœ:œPrompt-JcIIuœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-GoogleGenerativeAIModel-yqQGb{œfieldNameœ:œinput_valueœ,œidœ:œGoogleGenerativeAIModel-yqQGbœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                        "className": "",
                        "animated": false
                    },
                    {
                        "source": "JSONCleaner-49kgY",
                        "sourceHandle": "{œdataTypeœ:œJSONCleanerœ,œidœ:œJSONCleaner-49kgYœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
                        "target": "ChatOutput-bROnY",
                        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-bROnYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                        "data": {
                            "targetHandle": {
                                "fieldName": "input_value",
                                "id": "ChatOutput-bROnY",
                                "inputTypes": [
                                    "Message"
                                ],
                                "type": "str"
                            },
                            "sourceHandle": {
                                "dataType": "JSONCleaner",
                                "id": "JSONCleaner-49kgY",
                                "name": "output",
                                "output_types": [
                                    "Message"
                                ]
                            }
                        },
                        "id": "reactflow__edge-JSONCleaner-49kgY{œdataTypeœ:œJSONCleanerœ,œidœ:œJSONCleaner-49kgYœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-bROnY{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-bROnYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                        "className": "",
                        "animated": false
                    },
                    {
                        "source": "ChatInput-o1IK6",
                        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-o1IK6œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
                        "target": "Prompt-JcIIu",
                        "targetHandle": "{œfieldNameœ:œstudentTaskœ,œidœ:œPrompt-JcIIuœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                        "data": {
                            "targetHandle": {
                                "fieldName": "studentTask",
                                "id": "Prompt-JcIIu",
                                "inputTypes": [
                                    "Message",
                                    "Text"
                                ],
                                "type": "str"
                            },
                            "sourceHandle": {
                                "dataType": "ChatInput",
                                "id": "ChatInput-o1IK6",
                                "name": "message",
                                "output_types": [
                                    "Message"
                                ]
                            }
                        },
                        "id": "reactflow__edge-ChatInput-o1IK6{œdataTypeœ:œChatInputœ,œidœ:œChatInput-o1IK6œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-JcIIu{œfieldNameœ:œstudentTaskœ,œidœ:œPrompt-JcIIuœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                        "className": "",
                        "animated": false
                    },
                    {
                        "source": "GoogleGenerativeAIModel-yqQGb",
                        "sourceHandle": "{œdataTypeœ:œGoogleGenerativeAIModelœ,œidœ:œGoogleGenerativeAIModel-yqQGbœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
                        "target": "JSONCleaner-49kgY",
                        "targetHandle": "{œfieldNameœ:œjson_strœ,œidœ:œJSONCleaner-49kgYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                        "data": {
                            "targetHandle": {
                                "fieldName": "json_str",
                                "id": "JSONCleaner-49kgY",
                                "inputTypes": [
                                    "Message"
                                ],
                                "type": "str"
                            },
                            "sourceHandle": {
                                "dataType": "GoogleGenerativeAIModel",
                                "id": "GoogleGenerativeAIModel-yqQGb",
                                "name": "text_output",
                                "output_types": [
                                    "Message"
                                ]
                            }
                        },
                        "id": "reactflow__edge-GoogleGenerativeAIModel-yqQGb{œdataTypeœ:œGoogleGenerativeAIModelœ,œidœ:œGoogleGenerativeAIModel-yqQGbœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-JSONCleaner-49kgY{œfieldNameœ:œjson_strœ,œidœ:œJSONCleaner-49kgYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                        "animated": false,
                        "className": ""
                    }
                ],
                "viewport": {
                    "x": 133.23479638946037,
                    "y": 178.7795566333849,
                    "zoom": 0.4437731286740357
                }
            },
            "is_component": false,
            "updated_at": "2024-10-19T11:58:05+00:00",
            "webhook": false,
            "endpoint_name": "tableAssessment",
            "tags": null,
            "id": "428b050f-b590-480c-b84a-1a719fae9907",
            "user_id": "262f2705-7707-437e-86c4-f47acc20addd",
            "folder_id": "f8b09064-fe73-4596-bf22-31bdb86a7282"
        },
        {
            "name": "Chat input with extra files (2)",
            "description": "Get chat inputs from the Playground.",
            "icon": null,
            "icon_bg_color": null,
            "gradient": null,
            "data": {
                "edges": [],
                "nodes": [
                    {
                        "data": {
                            "type": "ChatInput",
                            "node": {
                                "template": {
                                    "_type": "Component",
                                    "file_1": {
                                        "trace_as_metadata": true,
                                        "file_path": "",
                                        "fileTypes": [
                                            "txt",
                                            "md",
                                            "mdx",
                                            "csv",
                                            "json",
                                            "yaml",
                                            "yml",
                                            "xml",
                                            "html",
                                            "htm",
                                            "pdf",
                                            "docx",
                                            "py",
                                            "sh",
                                            "sql",
                                            "js",
                                            "ts",
                                            "tsx",
                                            "jpg",
                                            "jpeg",
                                            "png",
                                            "bmp",
                                            "image"
                                        ],
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "file_1",
                                        "value": "",
                                        "display_name": "File 1",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "File 1 to be sent with the message.",
                                        "title_case": false,
                                        "type": "file",
                                        "_input_type": "FileInput"
                                    },
                                    "file_10": {
                                        "trace_as_metadata": true,
                                        "file_path": "",
                                        "fileTypes": [
                                            "txt",
                                            "md",
                                            "mdx",
                                            "csv",
                                            "json",
                                            "yaml",
                                            "yml",
                                            "xml",
                                            "html",
                                            "htm",
                                            "pdf",
                                            "docx",
                                            "py",
                                            "sh",
                                            "sql",
                                            "js",
                                            "ts",
                                            "tsx",
                                            "jpg",
                                            "jpeg",
                                            "png",
                                            "bmp",
                                            "image"
                                        ],
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "file_10",
                                        "value": "",
                                        "display_name": "File 10",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "File 10 to be sent with the message.",
                                        "title_case": false,
                                        "type": "file",
                                        "_input_type": "FileInput"
                                    },
                                    "file_2": {
                                        "trace_as_metadata": true,
                                        "file_path": "",
                                        "fileTypes": [
                                            "txt",
                                            "md",
                                            "mdx",
                                            "csv",
                                            "json",
                                            "yaml",
                                            "yml",
                                            "xml",
                                            "html",
                                            "htm",
                                            "pdf",
                                            "docx",
                                            "py",
                                            "sh",
                                            "sql",
                                            "js",
                                            "ts",
                                            "tsx",
                                            "jpg",
                                            "jpeg",
                                            "png",
                                            "bmp",
                                            "image"
                                        ],
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "file_2",
                                        "value": "",
                                        "display_name": "File 2",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "File 2 to be sent with the message.",
                                        "title_case": false,
                                        "type": "file",
                                        "_input_type": "FileInput"
                                    },
                                    "file_3": {
                                        "trace_as_metadata": true,
                                        "file_path": "",
                                        "fileTypes": [
                                            "txt",
                                            "md",
                                            "mdx",
                                            "csv",
                                            "json",
                                            "yaml",
                                            "yml",
                                            "xml",
                                            "html",
                                            "htm",
                                            "pdf",
                                            "docx",
                                            "py",
                                            "sh",
                                            "sql",
                                            "js",
                                            "ts",
                                            "tsx",
                                            "jpg",
                                            "jpeg",
                                            "png",
                                            "bmp",
                                            "image"
                                        ],
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "file_3",
                                        "value": "",
                                        "display_name": "File 3",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "File 3 to be sent with the message.",
                                        "title_case": false,
                                        "type": "file",
                                        "_input_type": "FileInput"
                                    },
                                    "file_4": {
                                        "trace_as_metadata": true,
                                        "file_path": "",
                                        "fileTypes": [
                                            "txt",
                                            "md",
                                            "mdx",
                                            "csv",
                                            "json",
                                            "yaml",
                                            "yml",
                                            "xml",
                                            "html",
                                            "htm",
                                            "pdf",
                                            "docx",
                                            "py",
                                            "sh",
                                            "sql",
                                            "js",
                                            "ts",
                                            "tsx",
                                            "jpg",
                                            "jpeg",
                                            "png",
                                            "bmp",
                                            "image"
                                        ],
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "file_4",
                                        "value": "",
                                        "display_name": "File 4",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "File 4 to be sent with the message.",
                                        "title_case": false,
                                        "type": "file",
                                        "_input_type": "FileInput"
                                    },
                                    "file_5": {
                                        "trace_as_metadata": true,
                                        "file_path": "",
                                        "fileTypes": [
                                            "txt",
                                            "md",
                                            "mdx",
                                            "csv",
                                            "json",
                                            "yaml",
                                            "yml",
                                            "xml",
                                            "html",
                                            "htm",
                                            "pdf",
                                            "docx",
                                            "py",
                                            "sh",
                                            "sql",
                                            "js",
                                            "ts",
                                            "tsx",
                                            "jpg",
                                            "jpeg",
                                            "png",
                                            "bmp",
                                            "image"
                                        ],
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "file_5",
                                        "value": "",
                                        "display_name": "File 5",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "File 5 to be sent with the message.",
                                        "title_case": false,
                                        "type": "file",
                                        "_input_type": "FileInput"
                                    },
                                    "file_6": {
                                        "trace_as_metadata": true,
                                        "file_path": "",
                                        "fileTypes": [
                                            "txt",
                                            "md",
                                            "mdx",
                                            "csv",
                                            "json",
                                            "yaml",
                                            "yml",
                                            "xml",
                                            "html",
                                            "htm",
                                            "pdf",
                                            "docx",
                                            "py",
                                            "sh",
                                            "sql",
                                            "js",
                                            "ts",
                                            "tsx",
                                            "jpg",
                                            "jpeg",
                                            "png",
                                            "bmp",
                                            "image"
                                        ],
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "file_6",
                                        "value": "",
                                        "display_name": "File 6",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "File 6 to be sent with the message.",
                                        "title_case": false,
                                        "type": "file",
                                        "_input_type": "FileInput"
                                    },
                                    "file_7": {
                                        "trace_as_metadata": true,
                                        "file_path": "",
                                        "fileTypes": [
                                            "txt",
                                            "md",
                                            "mdx",
                                            "csv",
                                            "json",
                                            "yaml",
                                            "yml",
                                            "xml",
                                            "html",
                                            "htm",
                                            "pdf",
                                            "docx",
                                            "py",
                                            "sh",
                                            "sql",
                                            "js",
                                            "ts",
                                            "tsx",
                                            "jpg",
                                            "jpeg",
                                            "png",
                                            "bmp",
                                            "image"
                                        ],
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "file_7",
                                        "value": "",
                                        "display_name": "File 7",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "File 7 to be sent with the message.",
                                        "title_case": false,
                                        "type": "file",
                                        "_input_type": "FileInput"
                                    },
                                    "file_8": {
                                        "trace_as_metadata": true,
                                        "file_path": "",
                                        "fileTypes": [
                                            "txt",
                                            "md",
                                            "mdx",
                                            "csv",
                                            "json",
                                            "yaml",
                                            "yml",
                                            "xml",
                                            "html",
                                            "htm",
                                            "pdf",
                                            "docx",
                                            "py",
                                            "sh",
                                            "sql",
                                            "js",
                                            "ts",
                                            "tsx",
                                            "jpg",
                                            "jpeg",
                                            "png",
                                            "bmp",
                                            "image"
                                        ],
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "file_8",
                                        "value": "",
                                        "display_name": "File 8",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "File 8 to be sent with the message.",
                                        "title_case": false,
                                        "type": "file",
                                        "_input_type": "FileInput"
                                    },
                                    "file_9": {
                                        "trace_as_metadata": true,
                                        "file_path": "",
                                        "fileTypes": [
                                            "txt",
                                            "md",
                                            "mdx",
                                            "csv",
                                            "json",
                                            "yaml",
                                            "yml",
                                            "xml",
                                            "html",
                                            "htm",
                                            "pdf",
                                            "docx",
                                            "py",
                                            "sh",
                                            "sql",
                                            "js",
                                            "ts",
                                            "tsx",
                                            "jpg",
                                            "jpeg",
                                            "png",
                                            "bmp",
                                            "image"
                                        ],
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "file_9",
                                        "value": "",
                                        "display_name": "File 9",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "File 9 to be sent with the message.",
                                        "title_case": false,
                                        "type": "file",
                                        "_input_type": "FileInput"
                                    },
                                    "code": {
                                        "type": "code",
                                        "required": true,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_USER, MESSAGE_SENDER_USER\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    MAX_FILES = 10  # Define the maximum number of files allowed\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n    ]\n\n    # Dynamically add multiple FileInput fields\n    for i in range(1, MAX_FILES + 1):\n        inputs.append(\n            FileInput(\n                name=f\"file_{i}\",\n                display_name=f\"File {i}\",\n                file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n                info=f\"File {i} to be sent with the message.\",\n                advanced=True,\n                is_list=False,  # Each FileInput handles a single file\n            )\n        )\n\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        # Collect all uploaded files into a list\n        files = []\n        for i in range(1, self.MAX_FILES + 1):\n            file = getattr(self, f\"file_{i}\", None)\n            if file:\n                files.append(file)\n\n        # Create the Message object with the list of files\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=files,  # Assign the collected list of files\n        )\n\n        # Store the message if required\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        # Update the component status\n        self.status = message\n        return message\n",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "code",
                                        "advanced": true,
                                        "dynamic": true,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false
                                    },
                                    "input_value": {
                                        "trace_as_input": true,
                                        "multiline": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "input_value",
                                        "value": "Tell me how many images you see and describe each one.",
                                        "display_name": "Text",
                                        "advanced": false,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Message to be passed as input.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MultilineInput"
                                    },
                                    "sender": {
                                        "trace_as_metadata": true,
                                        "options": [
                                            "Machine",
                                            "User"
                                        ],
                                        "combobox": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "sender",
                                        "value": "User",
                                        "display_name": "Sender Type",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Type of sender.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "DropdownInput"
                                    },
                                    "sender_name": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "sender_name",
                                        "value": "User",
                                        "display_name": "Sender Name",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Name of the sender.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "session_id": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "session_id",
                                        "value": "",
                                        "display_name": "Session ID",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "should_store_message": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "should_store_message",
                                        "value": true,
                                        "display_name": "Store Messages",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Store the message in the history.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput"
                                    }
                                },
                                "description": "Get chat inputs from the Playground.",
                                "icon": "ChatInput",
                                "base_classes": [
                                    "Message"
                                ],
                                "display_name": "Chat input with extra files (2)",
                                "documentation": "",
                                "custom_fields": {},
                                "output_types": [],
                                "pinned": false,
                                "conditional_paths": [],
                                "frozen": false,
                                "outputs": [
                                    {
                                        "types": [
                                            "Message"
                                        ],
                                        "selected": "Message",
                                        "name": "message",
                                        "display_name": "Message",
                                        "method": "message_response",
                                        "value": "__UNDEFINED__",
                                        "cache": true
                                    }
                                ],
                                "field_order": [
                                    "input_value",
                                    "should_store_message",
                                    "sender",
                                    "sender_name",
                                    "session_id",
                                    "file_1",
                                    "file_2",
                                    "file_3",
                                    "file_4",
                                    "file_5",
                                    "file_6",
                                    "file_7",
                                    "file_8",
                                    "file_9",
                                    "file_10"
                                ],
                                "beta": false,
                                "edited": true,
                                "metadata": {},
                                "official": false
                            },
                            "id": "ChatInput-hdmHN"
                        },
                        "id": "ChatInput-hdmHN",
                        "position": {
                            "x": 0,
                            "y": 0
                        },
                        "type": "genericNode"
                    }
                ],
                "viewport": {
                    "x": 1,
                    "y": 1,
                    "zoom": 1
                }
            },
            "is_component": true,
            "updated_at": "2024-10-10T19:45:35+00:00",
            "webhook": false,
            "endpoint_name": null,
            "tags": null,
            "id": "dfceff33-614d-44df-8ca5-602ba7ccd5f0",
            "user_id": "262f2705-7707-437e-86c4-f47acc20addd",
            "folder_id": "f8b09064-fe73-4596-bf22-31bdb86a7282"
        },
        {
            "name": "Text Assessment Flow",
            "description": "Empowering Communication, Enabling Opportunities.",
            "icon": null,
            "icon_bg_color": null,
            "gradient": null,
            "data": {
                "nodes": [
                    {
                        "id": "ChatOutput-I7xbB",
                        "type": "genericNode",
                        "position": {
                            "x": 2281.609363552012,
                            "y": 363.9953248115918
                        },
                        "data": {
                            "type": "ChatOutput",
                            "node": {
                                "template": {
                                    "_type": "Component",
                                    "code": {
                                        "type": "code",
                                        "required": true,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "code",
                                        "advanced": true,
                                        "dynamic": true,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false
                                    },
                                    "data_template": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "data_template",
                                        "value": "{text}",
                                        "display_name": "Data Template",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "input_value": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "input_value",
                                        "value": "",
                                        "display_name": "Text",
                                        "advanced": false,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Message to be passed as output.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "sender": {
                                        "trace_as_metadata": true,
                                        "options": [
                                            "Machine",
                                            "User"
                                        ],
                                        "combobox": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "sender",
                                        "value": "Machine",
                                        "display_name": "Sender Type",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Type of sender.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "DropdownInput"
                                    },
                                    "sender_name": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "sender_name",
                                        "value": "AI",
                                        "display_name": "Sender Name",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Name of the sender.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "session_id": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "session_id",
                                        "value": "",
                                        "display_name": "Session ID",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "should_store_message": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "should_store_message",
                                        "value": true,
                                        "display_name": "Store Messages",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Store the message in the history.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput"
                                    }
                                },
                                "description": "Display a chat message in the Playground.",
                                "icon": "ChatOutput",
                                "base_classes": [
                                    "Message"
                                ],
                                "display_name": "Chat Output",
                                "documentation": "",
                                "custom_fields": {},
                                "output_types": [],
                                "pinned": false,
                                "conditional_paths": [],
                                "frozen": false,
                                "outputs": [
                                    {
                                        "types": [
                                            "Message"
                                        ],
                                        "selected": "Message",
                                        "name": "message",
                                        "display_name": "Message",
                                        "method": "message_response",
                                        "value": "__UNDEFINED__",
                                        "cache": true
                                    }
                                ],
                                "field_order": [
                                    "input_value",
                                    "should_store_message",
                                    "sender",
                                    "sender_name",
                                    "session_id",
                                    "data_template"
                                ],
                                "beta": false,
                                "edited": false,
                                "metadata": {},
                                "lf_version": "1.0.18"
                            },
                            "id": "ChatOutput-I7xbB",
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output"
                        },
                        "selected": false,
                        "width": 384,
                        "height": 289,
                        "positionAbsolute": {
                            "x": 2281.609363552012,
                            "y": 363.9953248115918
                        },
                        "dragging": false
                    },
                    {
                        "id": "Prompt-pfdfd",
                        "type": "genericNode",
                        "position": {
                            "x": 394.1001341242294,
                            "y": 76.38855025857683
                        },
                        "data": {
                            "type": "Prompt",
                            "node": {
                                "template": {
                                    "_type": "Component",
                                    "code": {
                                        "type": "code",
                                        "required": true,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "code",
                                        "advanced": true,
                                        "dynamic": true,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false
                                    },
                                    "template": {
                                        "trace_as_input": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "template",
                                        "value": "## Reference Task\n### This task would score 5 across all criteria\n{referenceTask}\n\n## Empty Task\n### This task would score 0 across all criteria\n{emptyTask}\n\n## Student Task\n### This is the task you are assessing\n{studentTask}\n\n# Task\n\nCompare the student task with the reference and empty tasks. For each key, assess and score the student response based on the following criteria:\n\n1. **Completeness** (0-5):  \n   - Score 0 for if it matches the emtpy task.\n   - Score 5 if as detailed as the reference task.\n\n2. **Accuracy** (0-5):  \n   - Score 0 if it matches the empty task.\n   - Score 5 if it matches the reference task in accuracy and detail.\n\n3. **Spelling, Punctuation, and Grammar (SPaG)** (0-5):  \n   - Score 0 if entirely incorrect.\n   - Score 5 for flawless SPaG.\n\n\n\nProvide a short reasoning for each score, no longer than one sentence. Use the following JSON structure:\n\n{examples}\n\n*IMPORTANT*: In all cases, assess only the content that differs from the empty slide. The empty slide contains the template that students will write on.",
                                        "display_name": "Template",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "",
                                        "title_case": false,
                                        "type": "prompt",
                                        "_input_type": "PromptInput"
                                    },
                                    "referenceTask": {
                                        "field_type": "str",
                                        "required": false,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "Use this tweakID for the refrenceTask",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "referenceTask",
                                        "display_name": "referenceTask",
                                        "advanced": false,
                                        "input_types": [
                                            "Message",
                                            "Text"
                                        ],
                                        "dynamic": false,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false,
                                        "type": "str"
                                    },
                                    "emptyTask": {
                                        "field_type": "str",
                                        "required": false,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "Use this tweakId for the Empty Task",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "emptyTask",
                                        "display_name": "emptyTask",
                                        "advanced": false,
                                        "input_types": [
                                            "Message",
                                            "Text"
                                        ],
                                        "dynamic": false,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false,
                                        "type": "str"
                                    },
                                    "studentTask": {
                                        "field_type": "str",
                                        "required": false,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "studentTask",
                                        "display_name": "studentTask",
                                        "advanced": false,
                                        "input_types": [
                                            "Message",
                                            "Text"
                                        ],
                                        "dynamic": false,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false,
                                        "type": "str"
                                    },
                                    "examples": {
                                        "field_type": "str",
                                        "required": false,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "```json\n{\n    \"completeness\" : {\n        \"score\": {score},\n        \"reasoning\": \"{reasoning}\"\n    },\n    \"accuracy\" : {\n        \"score\": {score},\n        \"reasoning\": \"{reasoning}\"\n    },\n    \"spag\" : {\n        \"score\": {score},\n        \"reasoning\": \"{reasoning}\"\n    }\n}\n```\n\n## Examples:\n\n### Example 1: Partially correct student task\n\n```json\n{\n  \"completeness\": {\n    \"score\": 2,\n    \"reasoning\": \"Partially answered, missing key details.\"\n  },\n  \"accuracy\": {\n    \"score\": 3,\n    \"reasoning\": \"Mostly correct with minor errors.\"\n  },\n  \"spag\": {\n    \"score\": 4,\n    \"reasoning\": \"Good SPaG with few errors.\"\n  }\n}\n```\n\n### Example 2: Student task as good or better than the reference task\n\n```json\n{\n  \"completeness\": {\n    \"score\": 5,\n    \"reasoning\": \"Thorough and complete.\"\n  },\n  \"accuracy\": {\n    \"score\": 5,\n    \"reasoning\": \"All details are accurate.\"\n  },\n  \"spag\": {\n    \"score\": 5,\n    \"reasoning\": \"Flawless SPaG.\"\n  }\n}\n```\n\n### Example 3: No attempt made by the student\n\n```json\n{\n  \"completeness\": {\n    \"score\": 0,\n    \"reasoning\": \"No content provided.\"\n  },\n  \"accuracy\": {\n    \"score\": 0,\n    \"reasoning\": \"No content provided.\"\n  },\n  \"spag\": {\n    \"score\": 0,\n    \"reasoning\": \"No content provided.\"\n  }\n}",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "examples",
                                        "display_name": "examples",
                                        "advanced": false,
                                        "input_types": [
                                            "Message",
                                            "Text"
                                        ],
                                        "dynamic": false,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false,
                                        "type": "str"
                                    }
                                },
                                "description": "Create a prompt template with dynamic variables.",
                                "icon": "prompts",
                                "is_input": null,
                                "is_output": null,
                                "is_composition": null,
                                "base_classes": [
                                    "Message"
                                ],
                                "name": "",
                                "display_name": "Prompt",
                                "documentation": "",
                                "custom_fields": {
                                    "template": [
                                        "referenceTask",
                                        "emptyTask",
                                        "studentTask",
                                        "examples"
                                    ]
                                },
                                "output_types": [],
                                "full_path": null,
                                "pinned": false,
                                "conditional_paths": [],
                                "frozen": false,
                                "outputs": [
                                    {
                                        "types": [
                                            "Message"
                                        ],
                                        "selected": "Message",
                                        "name": "prompt",
                                        "hidden": null,
                                        "display_name": "Prompt Message",
                                        "method": "build_prompt",
                                        "value": "__UNDEFINED__",
                                        "cache": true
                                    }
                                ],
                                "field_order": [
                                    "template"
                                ],
                                "beta": false,
                                "error": null,
                                "edited": false,
                                "lf_version": "1.0.19.dev4"
                            },
                            "id": "Prompt-pfdfd"
                        },
                        "selected": false,
                        "width": 384,
                        "height": 649,
                        "positionAbsolute": {
                            "x": 394.1001341242294,
                            "y": 76.38855025857683
                        },
                        "dragging": false
                    },
                    {
                        "id": "GoogleGenerativeAIModel-EKwv5",
                        "type": "genericNode",
                        "position": {
                            "x": 952.9935957603411,
                            "y": 60.718640119246544
                        },
                        "data": {
                            "type": "GoogleGenerativeAIModel",
                            "node": {
                                "template": {
                                    "_type": "Component",
                                    "output_parser": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "output_parser",
                                        "value": "",
                                        "display_name": "Output Parser",
                                        "advanced": true,
                                        "input_types": [
                                            "OutputParser"
                                        ],
                                        "dynamic": false,
                                        "info": "The parser to use to parse the output of the model",
                                        "title_case": false,
                                        "type": "other",
                                        "_input_type": "HandleInput"
                                    },
                                    "code": {
                                        "type": "code",
                                        "required": true,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "from pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import DropdownInput, FloatInput, IntInput, SecretStrInput\nfrom langflow.inputs.inputs import HandleInput\n\n\nclass GoogleGenerativeAIComponent(LCModelComponent):\n    display_name = \"Google Generative AI\"\n    description = \"Generate text using Google Generative AI.\"\n    icon = \"GoogleGenerativeAI\"\n    name = \"GoogleGenerativeAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_output_tokens\", display_name=\"Max Output Tokens\", info=\"The maximum number of tokens to generate.\"\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            info=\"The name of the model to use.\",\n            options=[\"gemini-1.5-pro\", \"gemini-1.5-flash\", \"gemini-1.0-pro\", \"gemini-1.0-pro-vision\"],\n            value=\"gemini-1.5-pro\",\n        ),\n        SecretStrInput(\n            name=\"google_api_key\",\n            display_name=\"Google API Key\",\n            info=\"The Google API Key to use for the Google Generative AI.\",\n        ),\n        FloatInput(\n            name=\"top_p\",\n            display_name=\"Top P\",\n            info=\"The maximum cumulative probability of tokens to consider when sampling.\",\n            advanced=True,\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"n\",\n            display_name=\"N\",\n            info=\"Number of chat completions to generate for each prompt. \"\n            \"Note that the API may not return the full n completions if duplicates are generated.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"top_k\",\n            display_name=\"Top K\",\n            info=\"Decode using top-k sampling: consider the set of top_k most probable tokens. Must be positive.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"output_parser\",\n            display_name=\"Output Parser\",\n            info=\"The parser to use to parse the output of the model\",\n            advanced=True,\n            input_types=[\"OutputParser\"],\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        try:\n            from langchain_google_genai import ChatGoogleGenerativeAI\n        except ImportError as e:\n            msg = \"The 'langchain_google_genai' package is required to use the Google Generative AI model.\"\n            raise ImportError(msg) from e\n\n        google_api_key = self.google_api_key\n        model = self.model\n        max_output_tokens = self.max_output_tokens\n        temperature = self.temperature\n        top_k = self.top_k\n        top_p = self.top_p\n        n = self.n\n\n        return ChatGoogleGenerativeAI(  # type: ignore\n            model=model,\n            max_output_tokens=max_output_tokens or None,\n            temperature=temperature,\n            top_k=top_k or None,\n            top_p=top_p or None,\n            n=n or 1,\n            google_api_key=SecretStr(google_api_key),\n        )\n",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "code",
                                        "advanced": true,
                                        "dynamic": true,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false
                                    },
                                    "google_api_key": {
                                        "load_from_db": true,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "google_api_key",
                                        "value": "GOOGLE_API_KEY",
                                        "display_name": "Google API Key",
                                        "advanced": false,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "The Google API Key to use for the Google Generative AI.",
                                        "title_case": false,
                                        "password": true,
                                        "type": "str",
                                        "_input_type": "SecretStrInput"
                                    },
                                    "input_value": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "input_value",
                                        "value": "",
                                        "display_name": "Input",
                                        "advanced": false,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageInput"
                                    },
                                    "max_output_tokens": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "max_output_tokens",
                                        "value": "",
                                        "display_name": "Max Output Tokens",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "The maximum number of tokens to generate.",
                                        "title_case": false,
                                        "type": "int",
                                        "_input_type": "IntInput"
                                    },
                                    "model": {
                                        "trace_as_metadata": true,
                                        "options": [
                                            "gemini-1.5-pro",
                                            "gemini-1.5-flash",
                                            "gemini-1.0-pro",
                                            "gemini-1.0-pro-vision"
                                        ],
                                        "combobox": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "model",
                                        "value": "gemini-1.5-flash",
                                        "display_name": "Model",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "The name of the model to use.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "DropdownInput",
                                        "load_from_db": false
                                    },
                                    "n": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "n",
                                        "value": "",
                                        "display_name": "N",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.",
                                        "title_case": false,
                                        "type": "int",
                                        "_input_type": "IntInput"
                                    },
                                    "stream": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "stream",
                                        "value": false,
                                        "display_name": "Stream",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Stream the response from the model. Streaming works only in Chat.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput"
                                    },
                                    "system_message": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "system_message",
                                        "value": "",
                                        "display_name": "System Message",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "System message to pass to the model.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "temperature": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "temperature",
                                        "value": "0",
                                        "display_name": "Temperature",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "",
                                        "title_case": false,
                                        "type": "float",
                                        "_input_type": "FloatInput",
                                        "load_from_db": false
                                    },
                                    "top_k": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "top_k",
                                        "value": "",
                                        "display_name": "Top K",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Decode using top-k sampling: consider the set of top_k most probable tokens. Must be positive.",
                                        "title_case": false,
                                        "type": "int",
                                        "_input_type": "IntInput"
                                    },
                                    "top_p": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "top_p",
                                        "value": "",
                                        "display_name": "Top P",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "The maximum cumulative probability of tokens to consider when sampling.",
                                        "title_case": false,
                                        "type": "float",
                                        "_input_type": "FloatInput"
                                    }
                                },
                                "description": "Generate text using Google Generative AI.",
                                "icon": "GoogleGenerativeAI",
                                "base_classes": [
                                    "LanguageModel",
                                    "Message"
                                ],
                                "display_name": "Google Generative AI",
                                "documentation": "",
                                "custom_fields": {},
                                "output_types": [],
                                "pinned": false,
                                "conditional_paths": [],
                                "frozen": false,
                                "outputs": [
                                    {
                                        "types": [
                                            "Message"
                                        ],
                                        "selected": "Message",
                                        "name": "text_output",
                                        "display_name": "Text",
                                        "method": "text_response",
                                        "value": "__UNDEFINED__",
                                        "cache": true,
                                        "required_inputs": [
                                            "input_value",
                                            "stream",
                                            "system_message"
                                        ]
                                    },
                                    {
                                        "types": [
                                            "LanguageModel"
                                        ],
                                        "selected": "LanguageModel",
                                        "name": "model_output",
                                        "display_name": "Language Model",
                                        "method": "build_model",
                                        "value": "__UNDEFINED__",
                                        "cache": true,
                                        "required_inputs": [
                                            "google_api_key",
                                            "max_output_tokens",
                                            "model",
                                            "n",
                                            "temperature",
                                            "top_k",
                                            "top_p"
                                        ]
                                    }
                                ],
                                "field_order": [
                                    "input_value",
                                    "system_message",
                                    "stream",
                                    "max_output_tokens",
                                    "model",
                                    "google_api_key",
                                    "top_p",
                                    "temperature",
                                    "n",
                                    "top_k",
                                    "output_parser"
                                ],
                                "beta": false,
                                "edited": false,
                                "metadata": {},
                                "lf_version": "1.0.19.dev4"
                            },
                            "id": "GoogleGenerativeAIModel-EKwv5",
                            "description": "Generate text using Google Generative AI.",
                            "display_name": "Google Generative AI"
                        },
                        "selected": true,
                        "width": 384,
                        "height": 673,
                        "positionAbsolute": {
                            "x": 952.9935957603411,
                            "y": 60.718640119246544
                        },
                        "dragging": false
                    },
                    {
                        "id": "ChatInput-bSBb2",
                        "type": "genericNode",
                        "position": {
                            "x": -128.0299928417252,
                            "y": 355.67403005623015
                        },
                        "data": {
                            "type": "ChatInput",
                            "node": {
                                "template": {
                                    "_type": "Component",
                                    "files": {
                                        "trace_as_metadata": true,
                                        "file_path": "",
                                        "fileTypes": [
                                            "txt",
                                            "md",
                                            "mdx",
                                            "csv",
                                            "json",
                                            "yaml",
                                            "yml",
                                            "xml",
                                            "html",
                                            "htm",
                                            "pdf",
                                            "docx",
                                            "py",
                                            "sh",
                                            "sql",
                                            "js",
                                            "ts",
                                            "tsx",
                                            "jpg",
                                            "jpeg",
                                            "png",
                                            "bmp",
                                            "image"
                                        ],
                                        "list": true,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "files",
                                        "value": "",
                                        "display_name": "Files",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Files to be sent with the message.",
                                        "title_case": false,
                                        "type": "file",
                                        "_input_type": "FileInput"
                                    },
                                    "code": {
                                        "type": "code",
                                        "required": true,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_USER, MESSAGE_SENDER_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "code",
                                        "advanced": true,
                                        "dynamic": true,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false
                                    },
                                    "input_value": {
                                        "trace_as_input": true,
                                        "multiline": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "input_value",
                                        "value": "",
                                        "display_name": "Text",
                                        "advanced": false,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Message to be passed as input.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MultilineInput"
                                    },
                                    "sender": {
                                        "trace_as_metadata": true,
                                        "options": [
                                            "Machine",
                                            "User"
                                        ],
                                        "combobox": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "sender",
                                        "value": "User",
                                        "display_name": "Sender Type",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Type of sender.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "DropdownInput"
                                    },
                                    "sender_name": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "sender_name",
                                        "value": "User",
                                        "display_name": "Sender Name",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "Name of the sender.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "session_id": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "session_id",
                                        "value": "",
                                        "display_name": "Session ID",
                                        "advanced": true,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "should_store_message": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "should_store_message",
                                        "value": true,
                                        "display_name": "Store Messages",
                                        "advanced": true,
                                        "dynamic": false,
                                        "info": "Store the message in the history.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput"
                                    }
                                },
                                "description": "Get chat inputs from the Playground.",
                                "icon": "ChatInput",
                                "base_classes": [
                                    "Message"
                                ],
                                "display_name": "Chat Input",
                                "documentation": "",
                                "custom_fields": {},
                                "output_types": [],
                                "pinned": false,
                                "conditional_paths": [],
                                "frozen": false,
                                "outputs": [
                                    {
                                        "types": [
                                            "Message"
                                        ],
                                        "selected": "Message",
                                        "name": "message",
                                        "display_name": "Message",
                                        "method": "message_response",
                                        "value": "__UNDEFINED__",
                                        "cache": true
                                    }
                                ],
                                "field_order": [
                                    "input_value",
                                    "should_store_message",
                                    "sender",
                                    "sender_name",
                                    "session_id",
                                    "files"
                                ],
                                "beta": false,
                                "edited": false,
                                "metadata": {},
                                "lf_version": "1.0.19.dev4"
                            },
                            "id": "ChatInput-bSBb2",
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input"
                        },
                        "selected": false,
                        "width": 384,
                        "height": 289
                    },
                    {
                        "id": "JSONCleaner-QMoQV",
                        "type": "genericNode",
                        "position": {
                            "x": 1667.5766382602992,
                            "y": 60.38394272528336
                        },
                        "data": {
                            "type": "JSONCleaner",
                            "node": {
                                "template": {
                                    "_type": "Component",
                                    "code": {
                                        "type": "code",
                                        "required": true,
                                        "placeholder": "",
                                        "list": false,
                                        "show": true,
                                        "multiline": true,
                                        "value": "import json\nimport re\nimport unicodedata\n\nfrom langflow.custom import Component\nfrom langflow.inputs import BoolInput, MessageTextInput\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\n\n\nclass JSONCleaner(Component):\n    display_name = \"JSON Cleaner\"\n    description = (\n        \"Cleans the messy and sometimes incorrect JSON strings produced by LLMs \"\n        \"so that they are fully compliant with the JSON spec.\"\n    )\n    icon = \"custom_components\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"json_str\", display_name=\"JSON String\", info=\"The JSON string to be cleaned.\", required=True\n        ),\n        BoolInput(\n            name=\"remove_control_chars\",\n            display_name=\"Remove Control Characters\",\n            info=\"Remove control characters from the JSON string.\",\n            required=False,\n        ),\n        BoolInput(\n            name=\"normalize_unicode\",\n            display_name=\"Normalize Unicode\",\n            info=\"Normalize Unicode characters in the JSON string.\",\n            required=False,\n        ),\n        BoolInput(\n            name=\"validate_json\",\n            display_name=\"Validate JSON\",\n            info=\"Validate the JSON string to ensure it is well-formed.\",\n            required=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Cleaned JSON String\", name=\"output\", method=\"clean_json\"),\n    ]\n\n    def clean_json(self) -> Message:\n        try:\n            from json_repair import repair_json  # type: ignore\n        except ImportError as e:\n            msg = \"Could not import the json_repair package. Please install it with `pip install json_repair`.\"\n            raise ImportError(msg) from e\n\n        \"\"\"Clean the input JSON string based on provided options and return the cleaned JSON string.\"\"\"\n        json_str = self.json_str\n        remove_control_chars = self.remove_control_chars\n        normalize_unicode = self.normalize_unicode\n        validate_json = self.validate_json\n\n        try:\n            start = json_str.find(\"{\")\n            end = json_str.rfind(\"}\")\n            if start == -1 or end == -1:\n                msg = \"Invalid JSON string: Missing '{' or '}'\"\n                raise ValueError(msg)\n            json_str = json_str[start : end + 1]\n\n            if remove_control_chars:\n                json_str = self._remove_control_characters(json_str)\n            if normalize_unicode:\n                json_str = self._normalize_unicode(json_str)\n            if validate_json:\n                json_str = self._validate_json(json_str)\n\n            cleaned_json_str = repair_json(json_str)\n            result = str(cleaned_json_str)\n\n            self.status = result\n            return Message(text=result)\n        except Exception as e:\n            msg = f\"Error cleaning JSON string: {e}\"\n            raise ValueError(msg) from e\n\n    def _remove_control_characters(self, s: str) -> str:\n        \"\"\"Remove control characters from the string.\"\"\"\n        return re.sub(r\"[\\x00-\\x1F\\x7F]\", \"\", s)\n\n    def _normalize_unicode(self, s: str) -> str:\n        \"\"\"Normalize Unicode characters in the string.\"\"\"\n        return unicodedata.normalize(\"NFC\", s)\n\n    def _validate_json(self, s: str) -> str:\n        \"\"\"Validate the JSON string.\"\"\"\n        try:\n            json.loads(s)\n            return s\n        except json.JSONDecodeError as e:\n            msg = f\"Invalid JSON string: {e}\"\n            raise ValueError(msg) from e\n",
                                        "fileTypes": [],
                                        "file_path": "",
                                        "password": false,
                                        "name": "code",
                                        "advanced": true,
                                        "dynamic": true,
                                        "info": "",
                                        "load_from_db": false,
                                        "title_case": false
                                    },
                                    "json_str": {
                                        "trace_as_input": true,
                                        "trace_as_metadata": true,
                                        "load_from_db": false,
                                        "list": false,
                                        "required": true,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "json_str",
                                        "value": "",
                                        "display_name": "JSON String",
                                        "advanced": false,
                                        "input_types": [
                                            "Message"
                                        ],
                                        "dynamic": false,
                                        "info": "The JSON string to be cleaned.",
                                        "title_case": false,
                                        "type": "str",
                                        "_input_type": "MessageTextInput"
                                    },
                                    "normalize_unicode": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "normalize_unicode",
                                        "value": true,
                                        "display_name": "Normalize Unicode",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "Normalize Unicode characters in the JSON string.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput",
                                        "load_from_db": false
                                    },
                                    "remove_control_chars": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "remove_control_chars",
                                        "value": true,
                                        "display_name": "Remove Control Characters",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "Remove control characters from the JSON string.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput",
                                        "load_from_db": false
                                    },
                                    "validate_json": {
                                        "trace_as_metadata": true,
                                        "list": false,
                                        "required": false,
                                        "placeholder": "",
                                        "show": true,
                                        "name": "validate_json",
                                        "value": false,
                                        "display_name": "Validate JSON",
                                        "advanced": false,
                                        "dynamic": false,
                                        "info": "Validate the JSON string to ensure it is well-formed.",
                                        "title_case": false,
                                        "type": "bool",
                                        "_input_type": "BoolInput"
                                    }
                                },
                                "description": "Cleans the messy and sometimes incorrect JSON strings produced by LLMs so that they are fully compliant with the JSON spec.",
                                "icon": "custom_components",
                                "base_classes": [
                                    "Message"
                                ],
                                "display_name": "JSON Cleaner",
                                "documentation": "",
                                "custom_fields": {},
                                "output_types": [],
                                "pinned": false,
                                "conditional_paths": [],
                                "frozen": false,
                                "outputs": [
                                    {
                                        "types": [
                                            "Message"
                                        ],
                                        "selected": "Message",
                                        "name": "output",
                                        "display_name": "Cleaned JSON String",
                                        "method": "clean_json",
                                        "value": "__UNDEFINED__",
                                        "cache": true
                                    }
                                ],
                                "field_order": [
                                    "json_str",
                                    "remove_control_chars",
                                    "normalize_unicode",
                                    "validate_json"
                                ],
                                "beta": false,
                                "edited": false,
                                "metadata": {}
                            },
                            "id": "JSONCleaner-QMoQV",
                            "description": "Cleans the messy and sometimes incorrect JSON strings produced by LLMs so that they are fully compliant with the JSON spec.",
                            "display_name": "JSON Cleaner"
                        },
                        "selected": false,
                        "width": 384,
                        "height": 537,
                        "positionAbsolute": {
                            "x": 1667.5766382602992,
                            "y": 60.38394272528336
                        },
                        "dragging": false
                    }
                ],
                "edges": [
                    {
                        "source": "Prompt-pfdfd",
                        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-pfdfdœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                        "target": "GoogleGenerativeAIModel-EKwv5",
                        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œGoogleGenerativeAIModel-EKwv5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                        "data": {
                            "targetHandle": {
                                "fieldName": "input_value",
                                "id": "GoogleGenerativeAIModel-EKwv5",
                                "inputTypes": [
                                    "Message"
                                ],
                                "type": "str"
                            },
                            "sourceHandle": {
                                "dataType": "Prompt",
                                "id": "Prompt-pfdfd",
                                "name": "prompt",
                                "output_types": [
                                    "Message"
                                ]
                            }
                        },
                        "id": "reactflow__edge-Prompt-pfdfd{œdataTypeœ:œPromptœ,œidœ:œPrompt-pfdfdœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-GoogleGenerativeAIModel-EKwv5{œfieldNameœ:œinput_valueœ,œidœ:œGoogleGenerativeAIModel-EKwv5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                        "className": "",
                        "animated": false
                    },
                    {
                        "source": "ChatInput-bSBb2",
                        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-bSBb2œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
                        "target": "Prompt-pfdfd",
                        "targetHandle": "{œfieldNameœ:œstudentTaskœ,œidœ:œPrompt-pfdfdœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                        "data": {
                            "targetHandle": {
                                "fieldName": "studentTask",
                                "id": "Prompt-pfdfd",
                                "inputTypes": [
                                    "Message",
                                    "Text"
                                ],
                                "type": "str"
                            },
                            "sourceHandle": {
                                "dataType": "ChatInput",
                                "id": "ChatInput-bSBb2",
                                "name": "message",
                                "output_types": [
                                    "Message"
                                ]
                            }
                        },
                        "id": "reactflow__edge-ChatInput-bSBb2{œdataTypeœ:œChatInputœ,œidœ:œChatInput-bSBb2œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-pfdfd{œfieldNameœ:œstudentTaskœ,œidœ:œPrompt-pfdfdœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                        "className": "",
                        "animated": false
                    },
                    {
                        "source": "GoogleGenerativeAIModel-EKwv5",
                        "sourceHandle": "{œdataTypeœ:œGoogleGenerativeAIModelœ,œidœ:œGoogleGenerativeAIModel-EKwv5œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
                        "target": "JSONCleaner-QMoQV",
                        "targetHandle": "{œfieldNameœ:œjson_strœ,œidœ:œJSONCleaner-QMoQVœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                        "data": {
                            "targetHandle": {
                                "fieldName": "json_str",
                                "id": "JSONCleaner-QMoQV",
                                "inputTypes": [
                                    "Message"
                                ],
                                "type": "str"
                            },
                            "sourceHandle": {
                                "dataType": "GoogleGenerativeAIModel",
                                "id": "GoogleGenerativeAIModel-EKwv5",
                                "name": "text_output",
                                "output_types": [
                                    "Message"
                                ]
                            }
                        },
                        "id": "reactflow__edge-GoogleGenerativeAIModel-EKwv5{œdataTypeœ:œGoogleGenerativeAIModelœ,œidœ:œGoogleGenerativeAIModel-EKwv5œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-JSONCleaner-QMoQV{œfieldNameœ:œjson_strœ,œidœ:œJSONCleaner-QMoQVœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                        "animated": false,
                        "className": ""
                    },
                    {
                        "source": "JSONCleaner-QMoQV",
                        "sourceHandle": "{œdataTypeœ:œJSONCleanerœ,œidœ:œJSONCleaner-QMoQVœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
                        "target": "ChatOutput-I7xbB",
                        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-I7xbBœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                        "data": {
                            "targetHandle": {
                                "fieldName": "input_value",
                                "id": "ChatOutput-I7xbB",
                                "inputTypes": [
                                    "Message"
                                ],
                                "type": "str"
                            },
                            "sourceHandle": {
                                "dataType": "JSONCleaner",
                                "id": "JSONCleaner-QMoQV",
                                "name": "output",
                                "output_types": [
                                    "Message"
                                ]
                            }
                        },
                        "id": "reactflow__edge-JSONCleaner-QMoQV{œdataTypeœ:œJSONCleanerœ,œidœ:œJSONCleaner-QMoQVœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-I7xbB{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-I7xbBœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                        "animated": false,
                        "className": ""
                    }
                ],
                "viewport": {
                    "x": -20.171900505743224,
                    "y": 216.76048582509833,
                    "zoom": 0.4551507634683871
                }
            },
            "is_component": false,
            "updated_at": "2024-10-19T11:57:37+00:00",
            "webhook": false,
            "endpoint_name": "testAssessment",
            "tags": null,
            "id": "c7ce625a-35b7-409c-9789-d82bee8f8629",
            "user_id": "262f2705-7707-437e-86c4-f47acc20addd",
            "folder_id": "f8b09064-fe73-4596-bf22-31bdb86a7282"
        }
    ],
    "name": "folder",
    "description": "",
    "folder_name": "folder",
    "folder_description": ""
}