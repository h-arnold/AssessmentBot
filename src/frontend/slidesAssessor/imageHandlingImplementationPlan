## **Overview**

### **Key Objectives:**

1. **Retain the Existing `getSlideImage` Method:**
   - Continue using the `getSlideImage` method in the `SlideExtractor` class to fetch images of entire slides for both reference/empty slides and student submissions.

2. **Remove Image Caching in `LLMRequestManager`:**
   - Adjust the caching logic by removing image caching due to Google Apps Script cache size limitations.

3. **Update `Task` and `StudentTask` Classes:**
   - Incorporate new properties for image URLs.
   - Update serialization and deserialization methods to handle these new properties.

4. **Create a Base `RequestManager` Class:**
   - Implement a `RequestManager` base class that encapsulates shared request handling functionalities.
   - Define functionalities to be included in the base class and those to remain in the `LLMRequestManager` and `ImageRequestManager` classes.

5. **Implement the `ImageRequestManager` Class:**
   - Extend the `RequestManager` base class.
   - Handle image uploads using shared functionalities from the base class.

6. **Implement the `LLMRequestManager` Class:**
   - Extend the `RequestManager` base class.
   - Handle LLM requests using shared functionalities.

7. **Introduce a Separate `imageBatchSize` Setting:**
   - Add a new configuration parameter for controlling the batch size of image uploads.

8. **Verify and Enhance Error Handling in `getSlideImage`:**
   - Ensure that the `getSlideImage` method handles errors gracefully and logs them appropriately.

9. **Use UIDs to Associate Images with Student Responses:**
   - Utilize unique identifiers to correctly match images with their corresponding tasks and student responses.

10. **Use `toastMessage` for User Notifications:**
    - Provide immediate feedback to the user using the `Utils.toastMessage` method.

11. **Adjust the Workflow in the `Assignment` Class:**
    - Modify the workflow to process images appropriately, ensuring that image URLs are obtained before generating LLM requests.

12. **Thorough Testing and Debugging:**
    - Ensure that the updated system works as intended across all functionalities.

13. **Security Considerations:**
    - Ensure that API keys and sensitive data are handled securely.

14. **Update Documentation:**
    - Update code comments, documentation, and user guides to reflect changes.

15. **Deployment:**
    - Deploy the updated code to the production environment.

---

## **Implementation Steps**

### **Step 1: Update the `SlideExtractor` Class**

**File:** `SlideExtractor.gs`

**Objective:** Retain and use the `getSlideImage` method to extract images for reference, empty, and student slides.

### **Step 2: Update the `Task` Class**

**File:** `Task.gs`

**Objective:** Add properties for `referenceImageUrl` and `emptyImageUrl`, and update serialization methods.

### **Step 3: Update the `StudentTask` Class**

**File:** `StudentTask.gs`

**Objective:** Add the `studentImageUrl` property to responses and update methods accordingly.

---

### **Step 4: Create the Base `RequestManager` Class**

**File:** `RequestManager.gs` (New file)

**Objective:** Implement a `RequestManager` base class that encapsulates shared functionalities for handling HTTP requests, including batching, error handling, and retries.

#### Actions:

- **Define the Base Class:**
  - The `RequestManager` will include methods for sending requests in batches, processing responses, and retrying failed requests.
  
#### Testing:

- **Unit Tests for Base Class:**
  - Test the batching logic and retry mechanism independently.

---

### **Step 5: Implement the `ImageRequestManager` Class**

**File:** `ImageRequestManager.gs` (New file)

**Objective:** Extend the `RequestManager` base class to handle image uploads using shared functionalities.

#### Actions:

- **Generate Request Objects:**
  - Create request objects for image uploads.
  
- **Process Responses:**
  - Parse responses to extract image URLs and assign them to the correct tasks using UIDs.

- **Error Handling and Batch Size:**
  - Ensure that errors are handled and retry logic is implemented.

#### Testing:

- **Test Image Uploads:**
  - Verify that image URLs are correctly associated.

---

### **Step 6: Implement the `LLMRequestManager` Class**

**File:** `LLMRequestManager.gs`

**Objective:** Extend the `RequestManager` base class to handle LLM requests using shared functionalities.

#### Actions:

- **Generate Request Objects:**
  - Create request objects for LLM assessments.

- **Process Responses:**
  - Parse LLM responses and assign them to student tasks.

#### Testing:

- **Test LLM Requests:**
  - Verify that LLM requests are correctly generated and processed.

---

### **Step 7: Introduce a Separate `imageBatchSize` Setting**

**File:** `ConfigurationManager.gs`

**Objective:** Add a new configuration parameter for controlling the batch size of image uploads.

#### Actions:

- **Add Configuration Key and Getter/Setter Methods:**
  - Introduce a new key for `imageBatchSize` and methods to get and set it.

#### Testing:

- **Test Configuration Settings:**
  - Verify that the new settings are working correctly.

---

### **Step 8: Verify and Enhance Error Handling in `getSlideImage`**

**File:** `SlideExtractor.gs`

**Objective:** Ensure that the `getSlideImage` method handles errors gracefully and logs them appropriately.

#### Testing:

- **Simulate Error Conditions:**
  - Verify that errors are logged, and the method handles them correctly.

---

### **Step 9: Use UIDs to Associate Images with Responses**

**Files:** `StudentTask.gs`, `ImageRequestManager.gs`

**Objective:** Use UIDs to ensure the correct association of images with tasks and student responses.

#### Testing:

- **Test UID Association:**
  - Verify that image URLs are correctly associated with the correct tasks and responses using UIDs.

---

### **Step 10: Use `toastMessage` for User Notifications**

**Files:** `Utils.gs`, `ImageRequestManager.gs`, `LLMRequestManager.gs`

**Objective:** Provide immediate feedback to the user using the `Utils.toastMessage` method.

#### Testing:

- **Trigger Error Scenarios:**
  - Verify that appropriate toast messages are displayed.

---

### **Step 11: Adjust Workflow in the `Assignment` Class**

**File:** `Assignment.gs`

**Objective:** Modify the workflow to process images, ensuring that image URLs are obtained before generating LLM requests.

#### Actions:

- **Handle Image Blobs:**
  - Collect image Blobs for tasks and student responses and upload them using `ImageRequestManager`.

- **Ensure Sequential Processing:**
  - Ensure that image URLs are obtained before sending LLM requests.

#### Testing:

- **End-to-End Testing:**
  - Verify that image URLs are correctly assigned and included in LLM requests.

---

### **Step 12: Thorough Testing and Debugging**

**Objective:** Ensure that the updated system works as intended across all functionalities.

---

### **Step 13: Security Considerations**

**Objective:** Ensure that API keys and sensitive data are handled securely.

---

### **Step 14: Update Documentation**

**Objective:** Update code comments, documentation, and user guides to reflect changes.

---

### **Step 15: Deployment**

**Objective:** Deploy the updated code to the production environment.

---

## **Dependencies and Grouping**

**Independent Steps:**

- **Step 1:** Update `SlideExtractor` class.
- **Step 2:** Update `Task` class.
- **Step 3:** Update `StudentTask` class.
- **Step 8:** Verify error handling in `getSlideImage`.
- **Step 10:** Use `toastMessage` for user notifications.

**Dependent Steps:**

- **Step 4:** Create `RequestManager` base class.
- **Step 5:** Implement `ImageRequestManager` depends on Step 4.
- **Step 6:** Implement `LLMRequestManager` depends on Step 4.
- **Step 9:** Use UIDs to associate images with responses depends on Steps 3 and 5.
- **Step 11:** Adjust workflow in `Assignment` class depends on Steps 1-6 and 9.
